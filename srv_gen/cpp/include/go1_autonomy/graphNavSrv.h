/* Auto-generated by genmsg_cpp for file /home/amrl/workspaces/boh_ws/src/go1_autonomy/srv/graphNavSrv.srv */
#ifndef GO1_AUTONOMY_SERVICE_GRAPHNAVSRV_H
#define GO1_AUTONOMY_SERVICE_GRAPHNAVSRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "amrl_msgs/Pose2Df.h"
#include "amrl_msgs/Pose2Df.h"



namespace go1_autonomy
{
template <class ContainerAllocator>
struct graphNavSrvRequest_ {
  typedef graphNavSrvRequest_<ContainerAllocator> Type;

  graphNavSrvRequest_()
  : start()
  , end()
  {
  }

  graphNavSrvRequest_(const ContainerAllocator& _alloc)
  : start(_alloc)
  , end(_alloc)
  {
  }

  typedef  ::amrl_msgs::Pose2Df_<ContainerAllocator>  _start_type;
   ::amrl_msgs::Pose2Df_<ContainerAllocator>  start;

  typedef  ::amrl_msgs::Pose2Df_<ContainerAllocator>  _end_type;
   ::amrl_msgs::Pose2Df_<ContainerAllocator>  end;


  typedef boost::shared_ptr< ::go1_autonomy::graphNavSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::go1_autonomy::graphNavSrvRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct graphNavSrvRequest
typedef  ::go1_autonomy::graphNavSrvRequest_<std::allocator<void> > graphNavSrvRequest;

typedef boost::shared_ptr< ::go1_autonomy::graphNavSrvRequest> graphNavSrvRequestPtr;
typedef boost::shared_ptr< ::go1_autonomy::graphNavSrvRequest const> graphNavSrvRequestConstPtr;



template <class ContainerAllocator>
struct graphNavSrvResponse_ {
  typedef graphNavSrvResponse_<ContainerAllocator> Type;

  graphNavSrvResponse_()
  : plan()
  {
  }

  graphNavSrvResponse_(const ContainerAllocator& _alloc)
  : plan(_alloc)
  {
  }

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _plan_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  plan;


  typedef boost::shared_ptr< ::go1_autonomy::graphNavSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::go1_autonomy::graphNavSrvResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct graphNavSrvResponse
typedef  ::go1_autonomy::graphNavSrvResponse_<std::allocator<void> > graphNavSrvResponse;

typedef boost::shared_ptr< ::go1_autonomy::graphNavSrvResponse> graphNavSrvResponsePtr;
typedef boost::shared_ptr< ::go1_autonomy::graphNavSrvResponse const> graphNavSrvResponseConstPtr;


struct graphNavSrv
{

typedef graphNavSrvRequest Request;
typedef graphNavSrvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct graphNavSrv
} // namespace go1_autonomy

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::go1_autonomy::graphNavSrvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::go1_autonomy::graphNavSrvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::go1_autonomy::graphNavSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c20a2987666ccfb1bd2d583e37e46d80";
  }

  static const char* value(const  ::go1_autonomy::graphNavSrvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc20a2987666ccfb1ULL;
  static const uint64_t static_value2 = 0xbd2d583e37e46d80ULL;
};

template<class ContainerAllocator>
struct DataType< ::go1_autonomy::graphNavSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "go1_autonomy/graphNavSrvRequest";
  }

  static const char* value(const  ::go1_autonomy::graphNavSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::go1_autonomy::graphNavSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "amrl_msgs/Pose2Df start\n\
amrl_msgs/Pose2Df end\n\
\n\
================================================================================\n\
MSG: amrl_msgs/Pose2Df\n\
float32 x\n\
float32 y\n\
float32 theta\n\
";
  }

  static const char* value(const  ::go1_autonomy::graphNavSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::go1_autonomy::graphNavSrvRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::go1_autonomy::graphNavSrvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::go1_autonomy::graphNavSrvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::go1_autonomy::graphNavSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d00db495743883c1d9a4cf3d0844ceac";
  }

  static const char* value(const  ::go1_autonomy::graphNavSrvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd00db495743883c1ULL;
  static const uint64_t static_value2 = 0xd9a4cf3d0844ceacULL;
};

template<class ContainerAllocator>
struct DataType< ::go1_autonomy::graphNavSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "go1_autonomy/graphNavSrvResponse";
  }

  static const char* value(const  ::go1_autonomy::graphNavSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::go1_autonomy::graphNavSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32[] plan\n\
\n\
\n\
";
  }

  static const char* value(const  ::go1_autonomy::graphNavSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::go1_autonomy::graphNavSrvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.start);
    stream.next(m.end);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct graphNavSrvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::go1_autonomy::graphNavSrvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.plan);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct graphNavSrvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<go1_autonomy::graphNavSrv> {
  static const char* value() 
  {
    return "c6e7260a7c65d3e3a90b70afa473a36e";
  }

  static const char* value(const go1_autonomy::graphNavSrv&) { return value(); } 
};

template<>
struct DataType<go1_autonomy::graphNavSrv> {
  static const char* value() 
  {
    return "go1_autonomy/graphNavSrv";
  }

  static const char* value(const go1_autonomy::graphNavSrv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<go1_autonomy::graphNavSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c6e7260a7c65d3e3a90b70afa473a36e";
  }

  static const char* value(const go1_autonomy::graphNavSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<go1_autonomy::graphNavSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "go1_autonomy/graphNavSrv";
  }

  static const char* value(const go1_autonomy::graphNavSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<go1_autonomy::graphNavSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c6e7260a7c65d3e3a90b70afa473a36e";
  }

  static const char* value(const go1_autonomy::graphNavSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<go1_autonomy::graphNavSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "go1_autonomy/graphNavSrv";
  }

  static const char* value(const go1_autonomy::graphNavSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // GO1_AUTONOMY_SERVICE_GRAPHNAVSRV_H

